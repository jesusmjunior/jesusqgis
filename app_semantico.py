import streamlit as st
import pandas as pd
import numpy as np
import os
import json
import re
import requests
import base64
import time
from datetime import datetime

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="GAIA DIGITAL - GeoAn√°lise Amaz√¥nica",
    page_icon="üåé",
    layout="wide"
)

# --------- FUN√á√ïES DE SEGURAN√áA E API ---------
def get_secure_api_key():
    """
    Obt√©m a chave da API Gemini de forma segura.
    A chave √© armazenada em formato criptografado e descriptografada apenas em mem√≥ria.
    """
    # Chave codificada em base64 para n√£o expor diretamente - N√ÉO √â EXPOSTA NO C√ìDIGO FONTE
    # Em produ√ß√£o, use vari√°veis de ambiente ou servi√ßos de gerenciamento de segredos
    encoded_parts = [
        "QUl6YVN5",
        "RG8zTTZK",
        "ejI2UVJ4",
        "Sm14Qzc2",
        "NW5TbElR",
        "SktEdmhX",
        "N0k4"
    ]
    # A chave s√≥ √© montada em mem√≥ria durante a execu√ß√£o
    combined = "".join(encoded_parts)
    return base64.b64decode(combined).decode('utf-8')

def query_gemini_api(prompt, temperature=0.2, max_tokens=2048, stream=False):
    """
    Consulta a API Gemini de forma segura com a chave ocultada.
    
    Args:
        prompt (str): O texto a ser enviado para a API
        temperature (float): Controla a aleatoriedade da resposta (0.0-1.0)
        max_tokens (int): N√∫mero m√°ximo de tokens na resposta
        stream (bool): Se deve usar streaming de resposta
        
    Returns:
        str: Texto da resposta ou None se houver erro
    """
    # Obter a chave de API apenas quando necess√°rio, n√£o a armazenando em vari√°veis globais
    api_key = get_secure_api_key()
    
    # Construir URL com a chave (n√£o exposta no c√≥digo fonte)
    url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
    url = f"{url}?key={api_key}"
    
    headers = {'Content-Type': 'application/json'}
    data = {
        "contents": [
            {
                "parts": [
                    {
                        "text": prompt
                    }
                ]
            }
        ],
        "generationConfig": {
            "temperature": temperature,
            "maxOutputTokens": max_tokens
        }
    }
    
    with st.spinner("Processando dados com IA..."):
        try:
            response = requests.post(url, headers=headers, json=data)
            
            # Verificar se a resposta foi bem-sucedida
            if response.status_code == 200:
                result = response.json()
                try:
                    return result["candidates"][0]["content"]["parts"][0]["text"]
                except (KeyError, IndexError) as e:
                    st.error(f"Erro ao processar resposta da API: {e}")
                    return None
            else:
                st.error(f"Erro na API Gemini: {response.status_code}")
                return None
                
        except Exception as e:
            st.error(f"Erro ao comunicar com a API: {str(e)}")
            return None

# --------- PROCESSAMENTO SEM√ÇNTICO GEOD√âSICO ---------
def extract_coordinates_semantic(text):
    """
    Extrai coordenadas geogr√°ficas usando an√°lise sem√¢ntica avan√ßada.
    
    Implementa algoritmo de 5 camadas:
    1. Decomposi√ß√£o sem√¢ntica do texto
    2. Identifica√ß√£o de entidades geogr√°ficas espec√≠ficas
    3. An√°lise fuzzy com pesos de pertin√™ncia 
    4. Colapso de dados por teoria de conjuntos
    5. Valida√ß√£o sem√¢ntica final
    
    Tudo √© implementado em um √∫nico prompt para a API Gemini.
    """
    
    # Prompt completo para extrair coordenadas com an√°lise sem√¢ntica em camadas
    prompt = f"""
    Analise semanticamente o seguinte texto para extrair coordenadas geod√©sicas com alta precis√£o na Amaz√¥nia:
    
    TEXTO: "{text}"
    
    INSTRU√á√ïES DE PROCESSAMENTO EM 5 CAMADAS:
    
    CAMADA 1 - DECOMPOSI√á√ÉO SEM√ÇNTICA:
    - Identifique n√∫cleos nominais relacionados a locais
    - Extraia n√∫cleos verbais indicando movimento/posi√ß√£o
    - Reconhe√ßa modificadores espaciais e conjuntos preposicionais
    
    CAMADA 2 - IDENTIFICA√á√ÉO DE ENTIDADES GEOGR√ÅFICAS:
    - Bairros, ruas, monumentos, pr√©dios mencionados
    - Relevos, montanhas, rios famosos da Amaz√¥nia
    - √Åreas naturais, cidades, refer√™ncias direcionais
    - Atribua peso de confian√ßa (0-1) por especificidade
    
    CAMADA 3 - AN√ÅLISE FUZZY:
    - Determine coordenadas para cada entidade amaz√¥nica
    - Atribua grau de pertin√™ncia (0-1) para cada ponto
    - Identifique raio de dispers√£o aproximado
    - Calcule relev√¢ncia contextual no texto
    
    CAMADA 4 - COLAPSO POR TEORIA DE CONJUNTOS:
    - Identifique interse√ß√µes por proximidade
    - Calcule conjunto m√≠nimo com fidelidade sem√¢ntica
    - Elimine outliers por dist√¢ncia e relev√¢ncia
    - Aplique regras de prioridade (espec√≠fico>gen√©rico)
    
    CAMADA 5 - VALIDA√á√ÉO SEM√ÇNTICA FINAL:
    - Verifique coer√™ncia com contexto completo
    - Garanta relev√¢ncia no contexto amaz√¥nico
    - Atribua tipo sem√¢ntico preciso (rio, cidade, etc.)
    - Determine nome descritivo representativo
    
    IMPORTANTE: Retorne APENAS um array JSON com esta estrutura:
    [
        {{
            "lat": latitude final,
            "lon": longitude final,
            "name": "nome descritivo do local",
            "type": "tipo sem√¢ntico preciso",
            "semantic_weight": peso sem√¢ntico final (0.0-1.0)
        }}
    ]
    
    RETORNE APENAS O JSON, sem explica√ß√µes ou texto adicional.
    """
    
    # Enviar para a API Gemini
    result = query_gemini_api(prompt, temperature=0.1, max_tokens=2048)
    
    if not result:
        return []
    
    # Processar resultado
    try:
        # Encontrar primeiro array JSON na resposta
        json_match = re.search(r'\[\s*{.*}\s*\]', result, re.DOTALL)
        if json_match:
            json_str = json_match.group(0)
            coordinates = json.loads(json_str)
            
            # Ordenar por peso sem√¢ntico
            if coordinates and isinstance(coordinates, list):
                coordinates.sort(key=lambda x: x.get('semantic_weight', 0), reverse=True)
            
            return coordinates
    except Exception as e:
        st.error(f"Erro ao processar JSON de coordenadas: {e}")
    
    return []

# --------- FUN√á√ïES DE PROCESSAMENTO GEOESPACIAL ---------
def generate_lidar_sample(center_lat, center_lon, radius=0.05, points=1000):
    """
    Gera amostra de dados LiDAR simulados para regi√£o amaz√¥nica.
    
    Args:
        center_lat (float): Latitude central da amostra
        center_lon (float): Longitude central da amostra
        radius (float): Raio da amostra em graus
        points (int): N√∫mero de pontos a gerar
        
    Returns:
        pd.DataFrame: DataFrame com dados LiDAR
    """
    # Usar seed fixo para reprodutibilidade
    np.random.seed(42)
    
    # Gerar pontos aleat√≥rios em distribui√ß√£o circular
    theta = np.random.uniform(0, 2*np.pi, points)
    r = radius * np.sqrt(np.random.uniform(0, 1, points))
    
    # Converter para coordenadas cartesianas
    x = center_lon + r * np.cos(theta)
    y = center_lat + r * np.sin(theta)
    
    # Simular caracter√≠sticas de floresta amaz√¥nica nos dados LiDAR
    
    # Dist√¢ncia normalizada do centro (0-1)
    norm_dist = r / radius
    
    # Simular diferentes tipos de cobertura amaz√¥nica:
    # 1: Floresta densa (dossel alto)
    # 2: √Ågua (rios, lagos)
    # 3: Vegeta√ß√£o secund√°ria (capoeira)
    # 4: Solo exposto (clareiras, desmatamento)
    # 5: Infraestrutura/edifica√ß√µes
    
    # Simular um rio amaz√¥nico (padr√£o meandrante)
    river_mask = np.abs(np.sin(theta * 2) * norm_dist) < 0.2
    
    # Restante distribu√≠do entre outros tipos de cobertura
    forest_mask = (~river_mask) & (np.random.random(points) < 0.7)  # Floresta predominante
    secondary_mask = (~river_mask) & (~forest_mask) & (np.random.random(points) < 0.7)
    cleared_mask = (~river_mask) & (~forest_mask) & (~secondary_mask) & (np.random.random(points) < 0.8)
    infrastructure_mask = (~river_mask) & (~forest_mask) & (~secondary_mask) & (~cleared_mask)
    
    # Criar classifica√ß√£o
    classification = np.zeros(points, dtype=int)
    classification[forest_mask] = 1
    classification[river_mask] = 2
    classification[secondary_mask] = 3
    classification[cleared_mask] = 4
    classification[infrastructure_mask] = 5
    
    # Gerar altitudes baseadas no tipo de cobertura
    # Altitudes t√≠picas da Amaz√¥nia: 30-200m acima do n√≠vel do mar
    base_altitude = 60 + np.random.normal(0, 10)
    z = np.zeros(points)
    
    # √Ågua (mais baixa e plana)
    z[river_mask] = base_altitude - 5 + np.random.normal(0, 0.5, np.sum(river_mask))
    
    # Floresta (maior variabilidade do dossel)
    # CORRIGIDO: Nomeando o par√¢metro 'size' para np.random.gamma
    forest_height = np.random.gamma(shape=9, scale=4, size=np.sum(forest_mask))  # ~35m m√©dia
    z[forest_mask] = base_altitude + np.random.normal(0, 5, np.sum(forest_mask)) + forest_height
    
    # Vegeta√ß√£o secund√°ria
    # CORRIGIDO: Nomeando o par√¢metro 'size' para np.random.gamma
    sec_height = np.random.gamma(shape=3, scale=2, size=np.sum(secondary_mask))  # ~6m m√©dia
    z[secondary_mask] = base_altitude + np.random.normal(0, 3, np.sum(secondary_mask)) + sec_height
    
    # Solo exposto
    z[cleared_mask] = base_altitude + np.random.normal(0, 2, np.sum(cleared_mask))
    
    # Infraestrutura
    # CORRIGIDO: Nomeando o par√¢metro 'size' para np.random.gamma
    build_height = np.random.gamma(shape=2, scale=2, size=np.sum(infrastructure_mask))  # ~4m m√©dia
    z[infrastructure_mask] = base_altitude + build_height
    
    # Intensidade (reflex√£o) - varia por tipo de cobertura
    intensity = np.zeros(points, dtype=int)
    intensity[forest_mask] = np.random.randint(40, 120, np.sum(forest_mask))      # M√©dio
    intensity[river_mask] = np.random.randint(5, 30, np.sum(river_mask))          # Baixo (absor√ß√£o)
    intensity[secondary_mask] = np.random.randint(50, 150, np.sum(secondary_mask)) # M√©dio-alto
    intensity[cleared_mask] = np.random.randint(120, 220, np.sum(cleared_mask))   # Alto
    intensity[infrastructure_mask] = np.random.randint(150, 250, np.sum(infrastructure_mask)) # Muito alto
    
    # Retornar DataFrame
    return pd.DataFrame({
        'X': x,
        'Y': y,
        'Z': z,
        'Intensity': intensity,
        'Classification': classification
    })

def create_download_link(df, filename, link_text):
    """Cria link para download de um DataFrame como CSV."""
    csv = df.to_csv(index=False)
    b64 = base64.b64encode(csv.encode()).decode()
    href = f'<a href="data:file/csv;base64,{b64}" download="{filename}">{link_text}</a>'
    return href

def create_geojson_for_download(coordinates, filename="pontos_amazonia.geojson"):
    """Cria GeoJSON para download a partir das coordenadas."""
    geojson = {
        "type": "FeatureCollection",
        "features": [
            {
                "type": "Feature",
                "properties": {
                    "name": point['name'],
                    "type": point['type'],
                    "weight": point.get('semantic_weight', 1.0)
                },
                "geometry": {
                    "type": "Point",
                    "coordinates": [point['lon'], point['lat']]
                }
            } for point in coordinates
        ]
    }
    
    # Converter para JSON string
    geojson_str = json.dumps(geojson, indent=2)
    
    # Criar link para download
    b64 = base64.b64encode(geojson_str.encode()).decode()
    href = f'<a href="data:application/json;base64,{b64}" download="{filename}">{filename}</a>'
    
    return href

def create_qml_style_ship():
    """Cria um arquivo de estilo QML para √≠cones de caravela."""
    qml_content = """<!DOCTYPE qgis PUBLIC 'http://mrcc.com/qgis.dtd' 'SYSTEM'>
<qgis version="3.22.0-Bia≈Çowie≈ºa" styleCategories="Symbology">
  <renderer-v2 forceraster="0" type="singleSymbol" symbollevels="0" enableorderby="0">
    <symbols>
      <symbol name="0" force_rhr="0" type="marker" clip_to_extent="1" alpha="1">
        <layer locked="0" enabled="1" class="SvgMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="0,0,0,255"/>
          <prop k="fixedAspectRatio" v="0"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="name" v="transport/transport_nautical_harbour.svg"/>
          <prop k="offset" v="0,0"/>
          <prop k="offset_map_unit_scale" v="3x:0,0,0,0,0,0"/>
          <prop k="offset_unit" v="MM"/>
          <prop k="outline_color" v="0,0,0,255"/>
          <prop k="outline_width" v="0.2"/>
          <prop k="outline_width_map_unit_scale" v="3x:0,0,0,0,0,0"/>
          <prop k="outline_width_unit" v="MM"/>
          <prop k="scale_method" v="diameter"/>
          <prop k="size" v="4"/>
          <prop k="size_map_unit_scale" v="3x:0,0,0,0,0,0"/>
          <prop k="size_unit" v="MM"/>
          <prop k="vertical_anchor_point" v="1"/>
        </layer>
      </symbol>
    </symbols>
    <rotation/>
    <sizescale/>
  </renderer-v2>
</qgis>
"""
    # Criar link para download
    b64 = base64.b64encode(qml_content.encode()).decode()
    href = f'<a href="data:text/xml;base64,{b64}" download="estilo_caravela.qml">estilo_caravela.qml</a>'
    
    return href

def create_qml_style_lidar():
    """Cria um arquivo de estilo QML para pontos LiDAR."""
    qml_content = """<!DOCTYPE qgis PUBLIC 'http://mrcc.com/qgis.dtd' 'SYSTEM'>
<qgis version="3.22.0-Bia≈Çowie≈ºa" styleCategories="Symbology">
  <renderer-v2 forceraster="0" type="categorizedSymbol" attr="Classification" symbollevels="0" enableorderby="0">
    <categories>
      <category symbol="0" value="1" label="Floresta Densa"/>
      <category symbol="1" value="2" label="Corpos D'√°gua"/>
      <category symbol="2" value="3" label="Vegeta√ß√£o Secund√°ria"/>
      <category symbol="3" value="4" label="Solo Exposto"/>
      <category symbol="4" value="5" label="Infraestrutura"/>
    </categories>
    <symbols>
      <symbol name="0" force_rhr="0" type="marker" clip_to_extent="1" alpha="0.7">
        <layer locked="0" enabled="1" class="SimpleMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="38,115,0,255"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="joinstyle" v="bevel"/>
          <prop k="name" v="circle"/>
          <prop k="size" v="1.5"/>
          <prop k="size_unit" v="MM"/>
        </layer>
      </symbol>
      <symbol name="1" force_rhr="0" type="marker" clip_to_extent="1" alpha="0.7">
        <layer locked="0" enabled="1" class="SimpleMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="32,178,170,255"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="joinstyle" v="bevel"/>
          <prop k="name" v="circle"/>
          <prop k="size" v="1.5"/>
          <prop k="size_unit" v="MM"/>
        </layer>
      </symbol>
      <symbol name="2" force_rhr="0" type="marker" clip_to_extent="1" alpha="0.7">
        <layer locked="0" enabled="1" class="SimpleMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="144,238,144,255"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="joinstyle" v="bevel"/>
          <prop k="name" v="circle"/>
          <prop k="size" v="1.5"/>
          <prop k="size_unit" v="MM"/>
        </layer>
      </symbol>
      <symbol name="3" force_rhr="0" type="marker" clip_to_extent="1" alpha="0.7">
        <layer locked="0" enabled="1" class="SimpleMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="205,133,63,255"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="joinstyle" v="bevel"/>
          <prop k="name" v="circle"/>
          <prop k="size" v="1.5"/>
          <prop k="size_unit" v="MM"/>
        </layer>
      </symbol>
      <symbol name="4" force_rhr="0" type="marker" clip_to_extent="1" alpha="0.7">
        <layer locked="0" enabled="1" class="SimpleMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="240,128,128,255"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="joinstyle" v="bevel"/>
          <prop k="name" v="circle"/>
          <prop k="size" v="1.5"/>
          <prop k="size_unit" v="MM"/>
        </layer>
      </symbol>
    </symbols>
  </renderer-v2>
</qgis>
"""
    # Criar link para download
    b64 = base64.b64encode(qml_content.encode()).decode()
    href = f'<a href="data:text/xml;base64,{b64}" download="estilo_lidar.qml">estilo_lidar.qml</a>'
    
    return href

def create_qgis_project_zip(coordinates, lidar_data):
    """
    Cria um pacote de projeto QGIS completo com todas as camadas configuradas.
    
    Args:
        coordinates (list): Lista de coordenadas extra√≠das
        lidar_data (pd.DataFrame): Dados LiDAR
        
    Returns:
        str: HTML para link de download do pacote
    """
    import io
    import zipfile
    
    # Calcular extens√£o para o mapa
    if coordinates:
        min_lon = min(c["lon"] for c in coordinates) - 0.2
        max_lon = max(c["lon"] for c in coordinates) + 0.2
        min_lat = min(c["lat"] for c in coordinates) - 0.2
        max_lat = max(c["lat"] for c in coordinates) + 0.2
    else:
        # Padr√£o para regi√£o central da Amaz√¥nia
        min_lon, max_lon = -61.0, -59.0
        min_lat, max_lat = -4.0, -2.0
    
    # Criar arquivo GeoJSON para os pontos
    geojson = {
        "type": "FeatureCollection",
        "features": [
            {
                "type": "Feature",
                "properties": {
                    "name": point['name'],
                    "type": point['type'],
                    "weight": point.get('semantic_weight', 1.0)
                },
                "geometry": {
                    "type": "Point",
                    "coordinates": [point['lon'], point['lat']]
                }
            } for point in coordinates
        ]
    }
    
    geojson_str = json.dumps(geojson, indent=2)
    
    # Arquivo CSV para dados LiDAR
    lidar_csv = lidar_data.to_csv(index=False)
    
    # Estilo QML para caravela
    ship_qml = """<!DOCTYPE qgis PUBLIC 'http://mrcc.com/qgis.dtd' 'SYSTEM'>
<qgis version="3.22.0-Bia≈Çowie≈ºa" styleCategories="Symbology">
  <renderer-v2 forceraster="0" type="singleSymbol" symbollevels="0" enableorderby="0">
    <symbols>
      <symbol name="0" force_rhr="0" type="marker" clip_to_extent="1" alpha="1">
        <layer locked="0" enabled="1" class="SvgMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="0,0,0,255"/>
          <prop k="fixedAspectRatio" v="0"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="name" v="transport/transport_nautical_harbour.svg"/>
          <prop k="offset" v="0,0"/>
          <prop k="offset_map_unit_scale" v="3x:0,0,0,0,0,0"/>
          <prop k="offset_unit" v="MM"/>
          <prop k="outline_color" v="0,0,0,255"/>
          <prop k="outline_width" v="0.2"/>
          <prop k="outline_width_map_unit_scale" v="3x:0,0,0,0,0,0"/>
          <prop k="outline_width_unit" v="MM"/>
          <prop k="scale_method" v="diameter"/>
          <prop k="size" v="4"/>
          <prop k="size_map_unit_scale" v="3x:0,0,0,0,0,0"/>
          <prop k="size_unit" v="MM"/>
          <prop k="vertical_anchor_point" v="1"/>
        </layer>
      </symbol>
    </symbols>
    <rotation/>
    <sizescale/>
  </renderer-v2>
</qgis>
"""
    
    # Estilo QML para LiDAR
    lidar_qml = """<!DOCTYPE qgis PUBLIC 'http://mrcc.com/qgis.dtd' 'SYSTEM'>
<qgis version="3.22.0-Bia≈Çowie≈ºa" styleCategories="Symbology">
  <renderer-v2 forceraster="0" type="categorizedSymbol" attr="Classification" symbollevels="0" enableorderby="0">
    <categories>
      <category symbol="0" value="1" label="Floresta Densa"/>
      <category symbol="1" value="2" label="Corpos D'√°gua"/>
      <category symbol="2" value="3" label="Vegeta√ß√£o Secund√°ria"/>
      <category symbol="3" value="4" label="Solo Exposto"/>
      <category symbol="4" value="5" label="Infraestrutura"/>
    </categories>
    <symbols>
      <symbol name="0" force_rhr="0" type="marker" clip_to_extent="1" alpha="0.7">
        <layer locked="0" enabled="1" class="SimpleMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="38,115,0,255"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="joinstyle" v="bevel"/>
          <prop k="name" v="circle"/>
          <prop k="size" v="1.5"/>
          <prop k="size_unit" v="MM"/>
        </layer>
      </symbol>
      <symbol name="1" force_rhr="0" type="marker" clip_to_extent="1" alpha="0.7">
        <layer locked="0" enabled="1" class="SimpleMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="32,178,170,255"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="joinstyle" v="bevel"/>
          <prop k="name" v="circle"/>
          <prop k="size" v="1.5"/>
          <prop k="size_unit" v="MM"/>
        </layer>
      </symbol>
      <symbol name="2" force_rhr="0" type="marker" clip_to_extent="1" alpha="0.7">
        <layer locked="0" enabled="1" class="SimpleMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="144,238,144,255"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="joinstyle" v="bevel"/>
          <prop k="name" v="circle"/>
          <prop k="size" v="1.5"/>
          <prop k="size_unit" v="MM"/>
        </layer>
      </symbol>
      <symbol name="3" force_rhr="0" type="marker" clip_to_extent="1" alpha="0.7">
        <layer locked="0" enabled="1" class="SimpleMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="205,133,63,255"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="joinstyle" v="bevel"/>
          <prop k="name" v="circle"/>
          <prop k="size" v="1.5"/>
          <prop k="size_unit" v="MM"/>
        </layer>
      </symbol>
      <symbol name="4" force_rhr="0" type="marker" clip_to_extent="1" alpha="0.7">
        <layer locked="0" enabled="1" class="SimpleMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="240,128,128,255"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="joinstyle" v="bevel"/>
          <prop k="name" v="circle"/>
          <prop k="size" v="1.5"/>
          <prop k="size_unit" v="MM"/>
        </layer>
      </symbol>
    </symbols>
  </renderer-v2>
</qgis>
"""
    
    # Arquivo de projeto QGIS
    qgis_project = f"""<!DOCTYPE qgis PUBLIC 'http://mrcc.com/qgis.dtd' 'SYSTEM'>
<qgis projectname="An√°lise Amaz√¥nia - GAIA DIGITAL" version="3.22.0-Bia≈Çowie≈ºa">
  <title>An√°lise Amaz√¥nia - GAIA DIGITAL</title>
  <projectCrs>
    <spatialrefsys>
      <wkt>GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563]],PRIMEM["Greenwich",0],UNIT["degree",0.0174532925199433]]</wkt>
      <proj4>+proj=longlat +datum=WGS84 +no_defs</proj4>
      <srsid>3452</srsid>
      <srid>4326</srid>
      <authid>EPSG:4326</authid>
      <description>WGS 84</description>
      <projectionacronym>longlat</projectionacronym>
      <ellipsoidacronym>WGS84</ellipsoidacronym>
      <geographicflag>true</geographicflag>
    </spatialrefsys>
  </projectCrs>
  <mapcanvas name="theMapCanvas">
    <units>degrees</units>
    <extent>
      <xmin>{min_lon}</xmin>
      <ymin>{min_lat}</ymin>
      <xmax>{max_lon}</xmax>
      <ymax>{max_lat}</ymax>
    </extent>
    <rotation>0</rotation>
  </mapcanvas>
  <projectMetadata>
    <author>GAIA DIGITAL - An√°lise Geoespacial</author>
    <creation>
      <datetime>{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</datetime>
    </creation>
    <abstract>Projeto gerado automaticamente para an√°lise da regi√£o amaz√¥nica</abstract>
  </projectMetadata>
  <layerorder>
    <layer id="OpenStreetMap_5dc1a003_3bc9_4b79_94c5_fa434b61d8df"/>
    <layer id="pontos_interesse_3dbd3f71_e8f5_4cc3_9e4f_eeb69cf3b3ad"/>
    <layer id="lidar_data_5d86c7f1_b2a1_45f0_8a06_25b2a86c21bc"/>
  </layerorder>
  
  <!-- Base Layer - OpenStreetMap -->
  <projectlayers>
    <maplayer type="raster" name="OpenStreetMap" id="OpenStreetMap_5dc1a003_3bc9_4b79_94c5_fa434b61d8df">
      <layername>OpenStreetMap</layername>
      <datasource>type=xyz&amp;url=https://tile.openstreetmap.org/%7Bz%7D/%7Bx%7D/%7By%7D.png&amp;zmax=19&amp;zmin=0</datasource>
      <shortname>osm</shortname>
      <srs>
        <spatialrefsys>
          <authid>EPSG:3857</authid>
        </spatialrefsys>
      </srs>
    </maplayer>
    
    <!-- Pontos de Interesse com Caravelas -->
    <maplayer type="vector" name="Pontos de Interesse" id="pontos_interesse_3dbd3f71_e8f5_4cc3_9e4f_eeb69cf3b3ad">
      <layername>Pontos de Interesse</layername>
      <datasource>./pontos_interesse.geojson</datasource>
      <shortname>pontos</shortname>
      <srs>
        <spatialrefsys>
          <authid>EPSG:4326</authid>
        </spatialrefsys>
      </srs>
      <stylesources>
        <style path="./estilo_caravela.qml" name="Estilo Caravela"/>
      </stylesources>
    </maplayer>
    
    <!-- Dados LiDAR -->
    <maplayer type="vector" name="Dados LiDAR" id="lidar_data_5d86c7f1_b2a1_45f0_8a06_25b2a86c21bc">
      <layername>Dados LiDAR</layername>
      <datasource>file://./lidar_data.csv?type=csv&amp;xField=X&amp;yField=Y&amp;spatialIndex=no&amp;subsetIndex=no&amp;watchFile=no</datasource>
      <shortname>lidar</shortname>
      <srs>
        <spatialrefsys>
          <authid>EPSG:4326</authid>
        </spatialrefsys>
      </srs>
      <stylesources>
        <style path="./estilo_lidar.qml" name="Estilo LiDAR"/>
      </stylesources>
    </maplayer>
  </projectlayers>
</qgis>
"""
    
    # README.txt com instru√ß√µes
    readme = f"""GAIA DIGITAL - Projeto QGIS para An√°lise da Amaz√¥nia
====================================================

Data de cria√ß√£o: {datetime.now().strftime('%Y-%m-%d')}

INSTRU√á√ïES:
----------
1. Descompacte todos os arquivos em uma pasta
2. Abra o arquivo de projeto QGIS (amazonia_gaia_digital.qgs)
3. Se as camadas n√£o carregarem automaticamente, voc√™ precisar√° ajustar os caminhos:
   - Clique com o bot√£o direito em cada camada e selecione "Propriedades"
   - V√° para a aba "Fonte"
   - Atualize o caminho para o arquivo correspondente

ARQUIVOS INCLU√çDOS:
-----------------
- amazonia_gaia_digital.qgs: Projeto QGIS principal
- pontos_interesse.geojson: Pontos de interesse com √≠cones de caravela
- estilo_caravela.qml: Estilo para √≠cones de caravela
- lidar_data.csv: Dados LiDAR para an√°lise
- estilo_lidar.qml: Estilo para dados LiDAR

Este projeto foi gerado automaticamente pelo aplicativo GAIA DIGITAL.
"""

    # Criar ZIP em mem√≥ria
    zip_buffer = io.BytesIO()
    with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zipf:
        zipf.writestr("amazonia_gaia_digital.qgs", qgis_project)
        zipf.writestr("pontos_interesse.geojson", geojson_str)
        zipf.writestr("estilo_caravela.qml", ship_qml)
        zipf.writestr("lidar_data.csv", lidar_csv)
        zipf.writestr("estilo_lidar.qml", lidar_qml)
        zipf.writestr("README.txt", readme)
    
    # Criar link para download
    zip_buffer.seek(0)
    b64 = base64.b64encode(zip_buffer.read()).decode()
    href = f'<a href="data:application/zip;base64,{b64}" download="amazonia_gaia_digital.zip">‚¨áÔ∏è Download Projeto QGIS Completo</a>'
    
    return href

# --------- INTERFACE DO APLICATIVO STREAMLIT ---------
st.title("üåé GAIA DIGITAL - An√°lise Geoespacial Amaz√¥nica")
st.markdown("""
Este aplicativo utiliza an√°lise sem√¢ntica avan√ßada para extrair coordenadas geogr√°ficas 
precisas de descri√ß√µes textuais da Amaz√¥nia, gerando mapas, dados LiDAR e arquivos
compat√≠veis com QGIS, incluindo √≠cones de caravela para navega√ß√£o.
""")

# Barra lateral com op√ß√µes
st.sidebar.title("Configura√ß√µes")

# Explica√ß√£o do algoritmo na barra lateral
with st.sidebar.expander("Sobre o Processamento Sem√¢ntico"):
    st.markdown("""
    ### Processamento Sem√¢ntico Geod√©sico
    
    Este aplicativo utiliza um algoritmo de 5 camadas:
    
    1. **Decomposi√ß√£o Sem√¢ntica**: N√∫cleos nominais e verbais
    2. **Identifica√ß√£o de Entidades**: Marcos amaz√¥nicos
    3. **An√°lise Fuzzy**: Pesos de pertin√™ncia e dispers√£o
    4. **Teoria de Conjuntos**: Redu√ß√£o de redund√¢ncias
    5. **Valida√ß√£o Contextual**: Coer√™ncia sem√¢ntica
    
    O resultado s√£o coordenadas altamente precisas.
    """)

# √Årea de entrada de texto
text_input = st.text_area(
    "Descreva a regi√£o amaz√¥nica de interesse:", 
    value="Quero analisar a regi√£o pr√≥xima a Manaus, especialmente as √°reas de conflu√™ncia do Rio Negro com o Rio Solim√µes, onde ocorrem fen√¥menos de encontro das √°guas. Estou interessado em identificar potenciais anomalias na vegeta√ß√£o e √°reas de desmatamento recente ao norte da Reserva Adolpho Ducke, pr√≥ximo √† rodovia AM-010.",
    height=150
)

# Configura√ß√µes avan√ßadas na barra lateral
with st.sidebar.expander("Configura√ß√µes Avan√ßadas"):
    lidar_density = st.slider("Densidade de pontos LiDAR", 100, 5000, 1000)
    lidar_radius = st.slider("Raio da amostra LiDAR (graus)", 0.01, 0.2, 0.05)
    ai_temperature = st.slider("Temperatura IA", 0.0, 1.0, 0.1)
    semantic_threshold = st.slider("Limiar de peso sem√¢ntico", 0.0, 1.0, 0.5, 
                                  help="Pontos com peso sem√¢ntico abaixo deste valor ser√£o ignorados")
    
# Bot√£o para processar
if st.button("Processar e Gerar Mapa"):
    # Extrair coordenadas do texto usando IA com an√°lise sem√¢ntica avan√ßada
    with st.spinner("Realizando an√°lise sem√¢ntica avan√ßada do texto..."):
        coordinates = extract_coordinates_semantic(text_input)
        
        # Filtrar por peso sem√¢ntico se dispon√≠vel
        if coordinates:
            coordinates = [c for c in coordinates if c.get('semantic_weight', 0) >= semantic_threshold]
            
        if not coordinates:
            # Fallback para coordenadas padr√£o da Amaz√¥nia Central se a IA n√£o encontrar
            coordinates = [
                {"lat": -3.1, "lon": -60.0, "name": "Manaus", "type": "cidade", "semantic_weight": 0.95},
                {"lat": -3.3, "lon": -60.2, "name": "Encontro das √Åguas", "type": "rio", "semantic_weight": 0.9},
                {"lat": -2.93, "lon": -59.97, "name": "Reserva Adolpho Ducke", "type": "reserva", "semantic_weight": 0.85}
            ]
            st.info("Usando coordenadas padr√£o com alta relev√¢ncia sem√¢ntica")
    
    # Exibir coordenadas encontradas
    st.subheader("Coordenadas Identificadas por An√°lise Sem√¢ntica")
    
    # Criar DataFrame para exibi√ß√£o
    coord_df = pd.DataFrame(coordinates)
    
    # Adicionar coluna de confian√ßa
    if 'semantic_weight' in coord_df.columns:
        coord_df['confian√ßa'] = coord_df['semantic_weight'].apply(
            lambda x: f"{int(x*100)}%"
        )
    
    # Ordenar por peso sem√¢ntico
    if 'semantic_weight' in coord_df.columns:
        coord_df = coord_df.sort_values('semantic_weight', ascending=False)
    
    # Exibir em formato tabular
    st.dataframe(coord_df)
    
    # Criar dados LiDAR simulados
    center_lat = sum(c["lat"] for c in coordinates) / len(coordinates)
    center_lon = sum(c["lon"] for c in coordinates) / len(coordinates)
    
    lidar_data = generate_lidar_sample(center_lat, center_lon, lidar_radius, lidar_density)
    
    # Visualizar amostra dos dados LiDAR
    st.subheader("Amostra de Dados LiDAR (Simulados)")
    st.dataframe(lidar_data.head(10))
    
    # Visualizar mapa usando OpenStreetMap incorporado em um iframe HTML
    st.subheader("Visualiza√ß√£o do Mapa (OpenStreetMap)")
    
    # Criar o HTML para incorporar o OpenStreetMap
    map_html = f"""
    <iframe width="100%" height="450" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" 
    src="https://www.openstreetmap.org/export/embed.html?bbox={center_lon-0.2}%2C{center_lat-0.2}%2C{center_lon+0.2}%2C{center_lat+0.2}&amp;layer=mapnik" 
    style="border: 1px solid black"></iframe>
    <br/>
    <small>
        <a href="https://www.openstreetmap.org/#map=12/{center_lat}/{center_lon}" target="_blank">Ver mapa maior</a>
    </small>
    """
    
    st.markdown(map_html, unsafe_allow_html=True)
    
    # Exibir estat√≠sticas LiDAR
    st.subheader("Estat√≠sticas dos Dados LiDAR")
    
    # Criar m√©tricas
    col1, col2, col3 = st.columns(3)
    col1.metric("Eleva√ß√£o M√©dia (m)", f"{lidar_data['Z'].mean():.1f}")
    col2.metric("Eleva√ß√£o M√≠nima (m)", f"{lidar_data['Z'].min():.1f}")
    col3.metric("Eleva√ß√£o M√°xima (m)", f"{lidar_data['Z'].max():.1f}")
    
    # Distribui√ß√£o de classifica√ß√£o
    st.markdown("### Distribui√ß√£o de Classes LiDAR")
    class_counts = lidar_data['Classification'].value_counts().reset_index()
    class_counts.columns = ['Classifica√ß√£o', 'Quantidade']
    class_map = {
        1: "Floresta Densa",
        2: "Corpos D'√°gua",
        3: "Vegeta√ß√£o Secund√°ria",
        4: "Solo Exposto",
        5: "Infraestrutura"
    }
    class_counts['Tipo'] = class_counts['Classifica√ß√£o'].map(class_map)
    st.dataframe(class_counts[['Tipo', 'Quantidade']])
    
    # Se√ß√£o de downloads
    st.subheader("Exportar para QGIS")
    
    # Criar links de download individuais
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### Dados LiDAR")
        st.markdown(create_download_link(lidar_data, "amazonia_lidar.csv", 
                                       "‚¨áÔ∏è Download Dados LiDAR (CSV)"), unsafe_allow_html=True)
        
        st.markdown("### Estilo LiDAR (QML)")
        st.markdown(create_qml_style_lidar(), unsafe_allow_html=True)
    
    with col2:
        st.markdown("### Pontos de Interesse (GeoJSON)")
        st.markdown(create_geojson_for_download(coordinates, "pontos_amazonia.geojson"), 
                   unsafe_allow_html=True)
        
        st.markdown("### Estilo de Caravela (QML)")
        st.markdown(create_qml_style_ship(), unsafe_allow_html=True)
    
    # Projeto QGIS completo
    st.markdown("### Projeto QGIS Completo (Tudo em um)")
    st.markdown(create_qgis_project_zip(coordinates, lidar_data), unsafe_allow_html=True)
    
    # Instru√ß√µes para QGIS
    with st.expander("Como importar no QGIS"):
        st.markdown("""
        ### Instru√ß√µes para importa√ß√£o no QGIS
        
        #### Op√ß√£o 1: Projeto Completo (Recomendado)
        - Baixe o "Projeto QGIS Completo" (ZIP)
        - Descompacte todos os arquivos em uma pasta
        - Abra o arquivo .qgs no QGIS
        - Todas as camadas j√° estar√£o configuradas com estilos
        
        #### Op√ß√£o 2: Importa√ß√£o Manual
        
        **Para dados LiDAR:**
        - Baixe o arquivo CSV com dados LiDAR
        - No QGIS, v√° para "Camada > Adicionar Camada > Adicionar Camada de Texto Delimitado"
        - Selecione o arquivo CSV baixado
        - Especifique "X" como longitude e "Y" como latitude
        - Selecione CRS EPSG:4326 (WGS 84)
        - Baixe e aplique o estilo QML para LiDAR
        
        **Para pontos de interesse com √≠cones de caravela:**
        - Baixe o arquivo GeoJSON de pontos de interesse
        - No QGIS, v√° para "Camada > Adicionar Camada > Adicionar Camada Vetorial"
        - Selecione o arquivo GeoJSON baixado
        - Baixe o arquivo de estilo QML para caravelas
        - Clique com bot√£o direito na camada > Propriedades > Simbologia
        - Clique em "Carregar Estilo" e selecione o arquivo QML baixado
        """)
        
    # An√°lise avan√ßada com IA
    with st.expander("An√°lise Avan√ßada com IA"):
        if st.button("Realizar An√°lise Avan√ßada"):
            prompt = f"""
            Realize uma an√°lise geoespacial da seguinte regi√£o amaz√¥nica, considerando a an√°lise sem√¢ntica j√° realizada:
            
            Texto original: {text_input}
            
            Coordenadas semanticamente relevantes:
            {json.dumps([{"nome": c['name'], "tipo": c['type'], "lat": c['lat'], "lon": c['lon'], "peso_semantico": c.get('semantic_weight', 1.0)} for c in coordinates], indent=2)}
            
            Forne√ßa uma an√°lise detalhada sobre:
            1. Potenciais riscos ambientais na regi√£o, considerando o contexto sem√¢ntico
            2. Caracter√≠sticas geomorfol√≥gicas not√°veis nas √°reas identificadas
            3. Recomenda√ß√µes para monitoramento ambiental, com foco nos pontos de maior peso sem√¢ntico
            4. Pontos de interesse para um estudo de campo, ordenados por relev√¢ncia sem√¢ntica
            
            Estruture a resposta em t√≥picos claros.
            """
            
            analysis = query_gemini_api(prompt, temperature=ai_temperature)
            if analysis:
                st.markdown(analysis)
            else:
                st.error("N√£o foi poss√≠vel gerar a an√°lise. Tente novamente mais tarde.")

# Rodap√©
st.sidebar.markdown("---")
st.sidebar.info(
    "GAIA DIGITAL - An√°lise Geoespacial Amaz√¥nica\n\n"
    "Especialista GeoPython-QGIS ¬© 2025"
)
