import streamlit as st
import pandas as pd
import numpy as np
import os
import json
import re
import requests
import base64
import time
from datetime import datetime

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="GAIA DIGITAL - Cartografia Amaz√¥nica",
    page_icon="üó∫Ô∏è",
    layout="wide"
)

# --------- FUN√á√ïES DE SEGURAN√áA E API ---------
def get_secure_api_key():
    """
    Obt√©m a chave da API Gemini de forma segura.
    A chave √© armazenada em formato criptografado e descriptografada apenas em mem√≥ria.
    """
    # Chave codificada em base64 para n√£o expor diretamente
    encoded_parts = [
        "QUl6YVN5",
        "RG8zTTZK",
        "ejI2UVJ4",
        "Sm14Qzc2",
        "NW5TbElR",
        "SktEdmhX",
        "N0k4"
    ]
    # A chave s√≥ √© montada em mem√≥ria durante a execu√ß√£o
    combined = "".join(encoded_parts)
    return base64.b64decode(combined).decode('utf-8')

def query_gemini_api(prompt, temperature=0.2, max_tokens=2048):
    """
    Consulta a API Gemini de forma segura com a chave ocultada.
    """
    # Obter a chave API apenas quando necess√°rio
    api_key = get_secure_api_key()
    
    # Construir URL com a chave
    url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
    url = f"{url}?key={api_key}"
    
    headers = {'Content-Type': 'application/json'}
    data = {
        "contents": [
            {
                "parts": [
                    {
                        "text": prompt
                    }
                ]
            }
        ],
        "generationConfig": {
            "temperature": temperature,
            "maxOutputTokens": max_tokens
        }
    }
    
    with st.spinner("Processando an√°lise geogr√°fica..."):
        try:
            response = requests.post(url, headers=headers, json=data)
            
            # Verificar resposta
            if response.status_code == 200:
                result = response.json()
                try:
                    return result["candidates"][0]["content"]["parts"][0]["text"]
                except (KeyError, IndexError) as e:
                    st.error(f"Erro ao processar resposta da API: {e}")
                    return None
            else:
                st.error(f"Erro na API Gemini: {response.status_code}")
                return None
                
        except Exception as e:
            st.error(f"Erro ao comunicar com a API: {str(e)}")
            return None

# --------- PROCESSAMENTO CARTOGR√ÅFICO E GEOGR√ÅFICO ---------
def extract_geographic_features(text):
    """
    Extrai fei√ß√µes geogr√°ficas usando an√°lise sem√¢ntica avan√ßada com terminologia cartogr√°fica.
    """
    # Prompt especializado em cartografia e geografia
    prompt = f"""
    Analise o seguinte texto e extraia fei√ß√µes geogr√°ficas utilizando conceitos cartogr√°ficos:
    
    TEXTO: "{text}"
    
    INSTRU√á√ïES:
    
    1. Identifique as principais fei√ß√µes geogr√°ficas mencionadas:
       - Hidrografia (rios, lagos, igarap√©s, encontro de √°guas)
       - Relevo (serras, plat√¥s, plan√≠cies)
       - Cobertura vegetal (florestas, √°reas de transi√ß√£o, campos)
       - Localidades (cidades, comunidades, reservas)
       - Infraestrutura (estradas, portos, hidrel√©tricas)
       - Limites territoriais (fronteiras, unidades de conserva√ß√£o)
    
    2. Para cada fei√ß√£o geogr√°fica:
       - Determine coordenadas geogr√°ficas precisas (latitude/longitude) 
       - Classifique segundo padr√µes cartogr√°ficos (ponto, linha, pol√≠gono)
       - Identifique a escala de representa√ß√£o mais adequada
       - Atribua metadados importantes para cartografia tem√°tica
    
    3. Determine rela√ß√µes topol√≥gicas entre as fei√ß√µes:
       - Proximidade (adjac√™ncia, dist√¢ncia)
       - Conectividade (redes hidrogr√°ficas, sistemas vi√°rios)
       - Hierarquia (bacias hidrogr√°ficas, divis√µes pol√≠tico-administrativas)
    
    4. Priorize refer√™ncias a modelos digitais de eleva√ß√£o, camadas de uso do solo, e limites oficiais.
    
    IMPORTANTE: Retorne APENAS um array JSON com esta estrutura:
    [
        {{
            "nome": "nome da fei√ß√£o geogr√°fica",
            "tipo": "tipo de fei√ß√£o segundo padr√µes cartogr√°ficos",
            "categoria": "hidrografia|relevo|vegeta√ß√£o|localidade|infraestrutura|limite",
            "geometria": "ponto|linha|pol√≠gono",
            "lat": latitude em graus decimais,
            "lon": longitude em graus decimais,
            "importancia_cartografica": valor de 0.0 a 1.0 baseado na relev√¢ncia para mapeamento,
            "metadados": {{
                "fonte": "fonte da informa√ß√£o geogr√°fica",
                "escala_recomendada": "1:N (escala adequada para representa√ß√£o)",
                "data_referencia": "data aproximada da informa√ß√£o"
            }}
        }}
    ]
    
    RETORNE APENAS O JSON, sem explica√ß√µes ou texto adicional.
    """
    
    # Enviar para a API Gemini
    result = query_gemini_api(prompt, temperature=0.1, max_tokens=2048)
    
    if not result:
        return []
    
    # Processar resultado
    try:
        # Encontrar primeiro array JSON na resposta
        json_match = re.search(r'\[\s*{.*}\s*\]', result, re.DOTALL)
        if json_match:
            json_str = json_match.group(0)
            features = json.loads(json_str)
            
            # Ordenar por import√¢ncia cartogr√°fica
            if features and isinstance(features, list):
                features.sort(key=lambda x: x.get('importancia_cartografica', 0), reverse=True)
            
            return features
    except Exception as e:
        st.error(f"Erro ao processar JSON de fei√ß√µes geogr√°ficas: {e}")
    
    return []

def get_map_layers_html(center_lat, center_lon, zoom=10, features=None):
    """
    Gera HTML para m√∫ltiplas camadas de mapas (base, topogr√°fico, h√≠brido) usando servi√ßos de mapeamento abertos.
    """
    # OpenStreetMap b√°sico
    osm_base = f"""
    <iframe width="100%" height="300" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" 
    src="https://www.openstreetmap.org/export/embed.html?bbox={center_lon-0.2}%2C{center_lat-0.2}%2C{center_lon+0.2}%2C{center_lat+0.2}&amp;layer=mapnik&amp;marker={center_lat}%2C{center_lon}" 
    style="border: 1px solid black"></iframe>
    <br/>
    <small>
        <a href="https://www.openstreetmap.org/?mlat={center_lat}&mlon={center_lon}#map={zoom}/{center_lat}/{center_lon}" target="_blank">Ver mapa b√°sico em tela cheia</a>
    </small>
    """
    
    # Mapa topogr√°fico (OpenTopoMap)
    topo_map = f"""
    <iframe width="100%" height="300" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" 
    src="https://www.opentopomap.org/#map={zoom}/{center_lat}/{center_lon}" 
    style="border: 1px solid black"></iframe>
    <br/>
    <small>
        <a href="https://www.opentopomap.org/#map={zoom}/{center_lat}/{center_lon}" target="_blank">Ver mapa topogr√°fico em tela cheia</a>
    </small>
    """
    
    # Mapa h√≠brido (OpenStreetMap com imagens de sat√©lite usando ESRI)
    hybrid_map = f"""
    <iframe width="100%" height="300" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" 
    src="https://www.openstreetmap.org/export/embed.html?bbox={center_lon-0.2}%2C{center_lat-0.2}%2C{center_lon+0.2}%2C{center_lat+0.2}&amp;layer=hot&amp;marker={center_lat}%2C{center_lon}" 
    style="border: 1px solid black"></iframe>
    <br/>
    <small>
        <a href="https://www.openstreetmap.org/?mlat={center_lat}&mlon={center_lon}#map={zoom}/{center_lat}/{center_lon}&layers=H" target="_blank">Ver mapa h√≠brido em tela cheia</a>
    </small>
    """
    
    # Retornar HTML para cada tipo de mapa
    return {
        "base": osm_base,
        "topografico": topo_map, 
        "hibrido": hybrid_map
    }

def create_geojson_for_qgis(features, filename="feicoes_amazonicas.geojson"):
    """
    Cria GeoJSON para uso no QGIS a partir das fei√ß√µes geogr√°ficas identificadas.
    Incorpora metadados cartogr√°ficos adequados.
    """
    # Estrutura padr√£o de GeoJSON
    geojson = {
        "type": "FeatureCollection",
        "crs": {
            "type": "name",
            "properties": {
                "name": "urn:ogc:def:crs:OGC:1.3:CRS84"
            }
        },
        "features": []
    }
    
    # Processamento de cada fei√ß√£o
    for feature in features:
        # Definir geometria baseada no tipo
        if feature.get('geometria') == 'ponto':
            geometry = {
                "type": "Point",
                "coordinates": [feature.get('lon'), feature.get('lat')]
            }
        elif feature.get('geometria') == 'linha':
            # Para linhas, usamos apenas o ponto central como representa√ß√£o simplificada
            # Em um sistema real, ter√≠amos os pontos completos da linha
            geometry = {
                "type": "Point", 
                "coordinates": [feature.get('lon'), feature.get('lat')]
            }
        elif feature.get('geometria') == 'pol√≠gono':
            # Para pol√≠gonos, usamos apenas o ponto central como representa√ß√£o simplificada
            # Em um sistema real, ter√≠amos os v√©rtices completos do pol√≠gono
            geometry = {
                "type": "Point",
                "coordinates": [feature.get('lon'), feature.get('lat')]
            }
        else:
            # Padr√£o para casos n√£o especificados
            geometry = {
                "type": "Point",
                "coordinates": [feature.get('lon'), feature.get('lat')]
            }
        
        # Criar feature com propriedades completas
        geojson_feature = {
            "type": "Feature",
            "properties": {
                "nome": feature.get('nome', ''),
                "tipo": feature.get('tipo', ''),
                "categoria": feature.get('categoria', ''),
                "importancia": feature.get('importancia_cartografica', 0.5),
                "fonte": feature.get('metadados', {}).get('fonte', 'An√°lise sem√¢ntica'),
                "escala": feature.get('metadados', {}).get('escala_recomendada', '1:50000'),
                "data_ref": feature.get('metadados', {}).get('data_referencia', datetime.now().strftime('%Y-%m-%d')),
                "simbolo": get_symbol_for_category(feature.get('categoria', ''))
            },
            "geometry": geometry
        }
        
        geojson["features"].append(geojson_feature)
    
    # Converter para JSON string
    geojson_str = json.dumps(geojson, indent=2)
    
    # Criar link para download
    b64 = base64.b64encode(geojson_str.encode()).decode()
    href = f'<a href="data:application/json;base64,{b64}" download="{filename}">{filename}</a>'
    
    return href, geojson_str

def get_symbol_for_category(categoria):
    """
    Retorna o s√≠mbolo cartogr√°fico adequado para cada categoria de fei√ß√£o.
    Utilizado para definir a simbologia no QGIS.
    """
    # Mapeamento de categorias para s√≠mbolos adequados
    categoria = categoria.lower() if categoria else ""
    
    if "hidrografia" in categoria or "rio" in categoria or "lago" in categoria:
        return "agua"
    elif "relevo" in categoria or "serra" in categoria or "montanha" in categoria:
        return "elevacao" 
    elif "vegeta√ß√£o" in categoria or "floresta" in categoria:
        return "vegetacao"
    elif "localidade" in categoria or "cidade" in categoria or "comunidade" in categoria:
        return "localidade"
    elif "infraestrutura" in categoria or "estrada" in categoria:
        return "infraestrutura"
    elif "limite" in categoria or "fronteira" in categoria:
        return "limite"
    else:
        return "geral"

def create_qml_styles_for_qgis():
    """
    Cria estilos QML para diferentes tipos de fei√ß√µes geogr√°ficas.
    Aplica simbologia cartogr√°fica padr√£o.
    """
    # Definir estilos para diferentes categorias
    
    # Estilo para caravela (navega√ß√£o)
    caravela_qml = """<!DOCTYPE qgis PUBLIC 'http://mrcc.com/qgis.dtd' 'SYSTEM'>
<qgis version="3.22.0-Bia≈Çowie≈ºa" styleCategories="Symbology">
  <renderer-v2 forceraster="0" type="singleSymbol" symbollevels="0" enableorderby="0">
    <symbols>
      <symbol name="0" force_rhr="0" type="marker" clip_to_extent="1" alpha="1">
        <layer locked="0" enabled="1" class="SvgMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="0,0,0,255"/>
          <prop k="fixedAspectRatio" v="0"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="name" v="transport/transport_nautical_harbour.svg"/>
          <prop k="offset" v="0,0"/>
          <prop k="offset_map_unit_scale" v="3x:0,0,0,0,0,0"/>
          <prop k="offset_unit" v="MM"/>
          <prop k="outline_color" v="0,0,0,255"/>
          <prop k="outline_width" v="0.2"/>
          <prop k="outline_width_map_unit_scale" v="3x:0,0,0,0,0,0"/>
          <prop k="outline_width_unit" v="MM"/>
          <prop k="scale_method" v="diameter"/>
          <prop k="size" v="4"/>
          <prop k="size_map_unit_scale" v="3x:0,0,0,0,0,0"/>
          <prop k="size_unit" v="MM"/>
          <prop k="vertical_anchor_point" v="1"/>
        </layer>
      </symbol>
    </symbols>
    <rotation/>
    <sizescale/>
  </renderer-v2>
</qgis>
"""
    
    # Estilo para categorias (usando renderizador categorizado)
    categorias_qml = """<!DOCTYPE qgis PUBLIC 'http://mrcc.com/qgis.dtd' 'SYSTEM'>
<qgis version="3.22.0-Bia≈Çowie≈ºa" styleCategories="Symbology">
  <renderer-v2 forceraster="0" type="categorizedSymbol" attr="simbolo" symbollevels="0" enableorderby="0">
    <categories>
      <category symbol="0" value="agua" label="Hidrografia"/>
      <category symbol="1" value="elevacao" label="Relevo"/>
      <category symbol="2" value="vegetacao" label="Vegeta√ß√£o"/>
      <category symbol="3" value="localidade" label="Localidades"/>
      <category symbol="4" value="infraestrutura" label="Infraestrutura"/>
      <category symbol="5" value="limite" label="Limites"/>
      <category symbol="6" value="geral" label="Outros"/>
    </categories>
    <symbols>
      <symbol name="0" force_rhr="0" type="marker" clip_to_extent="1" alpha="1">
        <layer locked="0" enabled="1" class="SimpleMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="0,170,255,255"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="joinstyle" v="bevel"/>
          <prop k="name" v="circle"/>
          <prop k="size" v="3.5"/>
          <prop k="size_unit" v="MM"/>
        </layer>
      </symbol>
      <symbol name="1" force_rhr="0" type="marker" clip_to_extent="1" alpha="1">
        <layer locked="0" enabled="1" class="SimpleMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="168,112,0,255"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="joinstyle" v="bevel"/>
          <prop k="name" v="triangle"/>
          <prop k="size" v="3.5"/>
          <prop k="size_unit" v="MM"/>
        </layer>
      </symbol>
      <symbol name="2" force_rhr="0" type="marker" clip_to_extent="1" alpha="1">
        <layer locked="0" enabled="1" class="SimpleMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="0,170,0,255"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="joinstyle" v="bevel"/>
          <prop k="name" v="square"/>
          <prop k="size" v="3.5"/>
          <prop k="size_unit" v="MM"/>
        </layer>
      </symbol>
      <symbol name="3" force_rhr="0" type="marker" clip_to_extent="1" alpha="1">
        <layer locked="0" enabled="1" class="SimpleMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="255,0,0,255"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="joinstyle" v="bevel"/>
          <prop k="name" v="circle"/>
          <prop k="size" v="3.5"/>
          <prop k="size_unit" v="MM"/>
        </layer>
      </symbol>
      <symbol name="4" force_rhr="0" type="marker" clip_to_extent="1" alpha="1">
        <layer locked="0" enabled="1" class="SimpleMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="0,0,0,255"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="joinstyle" v="bevel"/>
          <prop k="name" v="square"/>
          <prop k="size" v="3.5"/>
          <prop k="size_unit" v="MM"/>
        </layer>
      </symbol>
      <symbol name="5" force_rhr="0" type="marker" clip_to_extent="1" alpha="1">
        <layer locked="0" enabled="1" class="SimpleMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="255,170,255,255"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="joinstyle" v="bevel"/>
          <prop k="name" v="diamond"/>
          <prop k="size" v="3.5"/>
          <prop k="size_unit" v="MM"/>
        </layer>
      </symbol>
      <symbol name="6" force_rhr="0" type="marker" clip_to_extent="1" alpha="1">
        <layer locked="0" enabled="1" class="SimpleMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="150,150,150,255"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="joinstyle" v="bevel"/>
          <prop k="name" v="cross"/>
          <prop k="size" v="3.5"/>
          <prop k="size_unit" v="MM"/>
        </layer>
      </symbol>
    </symbols>
    <rotation/>
    <sizescale/>
  </renderer-v2>
</qgis>
"""
    
    # Criar links para download
    caravela_b64 = base64.b64encode(caravela_qml.encode()).decode()
    categorias_b64 = base64.b64encode(categorias_qml.encode()).decode()
    
    caravela_href = f'<a href="data:text/xml;base64,{caravela_b64}" download="estilo_caravela.qml">estilo_caravela.qml</a>'
    categorias_href = f'<a href="data:text/xml;base64,{categorias_b64}" download="estilo_categorias.qml">estilo_categorias.qml</a>'
    
    return {
        "caravela": caravela_href,
        "categorias": categorias_href
    }

def create_qgis_project_package(features, geojson_str):
    """
    Cria um pacote de projeto QGIS completo com camadas configuradas segundo padr√µes cartogr√°ficos.
    """
    import io
    import zipfile
    
    # Calcular extens√£o do mapa a partir das fei√ß√µes
    if features:
        min_lon = min(f.get("lon", 0) for f in features) - 0.2
        max_lon = max(f.get("lon", 0) for f in features) + 0.2
        min_lat = min(f.get("lat", 0) for f in features) - 0.2
        max_lat = max(f.get("lat", 0) for f in features) + 0.2
        
        # Usar ponto central para definir visualiza√ß√£o inicial
        center_lat = (min_lat + max_lat) / 2
        center_lon = (min_lon + max_lon) / 2
    else:
        # Coordenadas padr√£o para a Amaz√¥nia Central
        min_lon, max_lon = -61.0, -59.0
        min_lat, max_lat = -4.0, -2.0
        center_lat, center_lon = -3.1, -60.0
    
    # Estilos QML
    caravela_qml = """<!DOCTYPE qgis PUBLIC 'http://mrcc.com/qgis.dtd' 'SYSTEM'>
<qgis version="3.22.0-Bia≈Çowie≈ºa" styleCategories="Symbology">
  <renderer-v2 forceraster="0" type="singleSymbol" symbollevels="0" enableorderby="0">
    <symbols>
      <symbol name="0" force_rhr="0" type="marker" clip_to_extent="1" alpha="1">
        <layer locked="0" enabled="1" class="SvgMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="0,0,0,255"/>
          <prop k="fixedAspectRatio" v="0"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="name" v="transport/transport_nautical_harbour.svg"/>
          <prop k="offset" v="0,0"/>
          <prop k="offset_map_unit_scale" v="3x:0,0,0,0,0,0"/>
          <prop k="offset_unit" v="MM"/>
          <prop k="outline_color" v="0,0,0,255"/>
          <prop k="outline_width" v="0.2"/>
          <prop k="outline_width_map_unit_scale" v="3x:0,0,0,0,0,0"/>
          <prop k="outline_width_unit" v="MM"/>
          <prop k="scale_method" v="diameter"/>
          <prop k="size" v="4"/>
          <prop k="size_map_unit_scale" v="3x:0,0,0,0,0,0"/>
          <prop k="size_unit" v="MM"/>
          <prop k="vertical_anchor_point" v="1"/>
        </layer>
      </symbol>
    </symbols>
    <rotation/>
    <sizescale/>
  </renderer-v2>
</qgis>
"""
    
    categorias_qml = """<!DOCTYPE qgis PUBLIC 'http://mrcc.com/qgis.dtd' 'SYSTEM'>
<qgis version="3.22.0-Bia≈Çowie≈ºa" styleCategories="Symbology">
  <renderer-v2 forceraster="0" type="categorizedSymbol" attr="simbolo" symbollevels="0" enableorderby="0">
    <categories>
      <category symbol="0" value="agua" label="Hidrografia"/>
      <category symbol="1" value="elevacao" label="Relevo"/>
      <category symbol="2" value="vegetacao" label="Vegeta√ß√£o"/>
      <category symbol="3" value="localidade" label="Localidades"/>
      <category symbol="4" value="infraestrutura" label="Infraestrutura"/>
      <category symbol="5" value="limite" label="Limites"/>
      <category symbol="6" value="geral" label="Outros"/>
    </categories>
    <symbols>
      <symbol name="0" force_rhr="0" type="marker" clip_to_extent="1" alpha="1">
        <layer locked="0" enabled="1" class="SimpleMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="0,170,255,255"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="joinstyle" v="bevel"/>
          <prop k="name" v="circle"/>
          <prop k="size" v="3.5"/>
          <prop k="size_unit" v="MM"/>
        </layer>
      </symbol>
      <symbol name="1" force_rhr="0" type="marker" clip_to_extent="1" alpha="1">
        <layer locked="0" enabled="1" class="SimpleMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="168,112,0,255"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="joinstyle" v="bevel"/>
          <prop k="name" v="triangle"/>
          <prop k="size" v="3.5"/>
          <prop k="size_unit" v="MM"/>
        </layer>
      </symbol>
      <symbol name="2" force_rhr="0" type="marker" clip_to_extent="1" alpha="1">
        <layer locked="0" enabled="1" class="SimpleMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="0,170,0,255"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="joinstyle" v="bevel"/>
          <prop k="name" v="square"/>
          <prop k="size" v="3.5"/>
          <prop k="size_unit" v="MM"/>
        </layer>
      </symbol>
      <symbol name="3" force_rhr="0" type="marker" clip_to_extent="1" alpha="1">
        <layer locked="0" enabled="1" class="SimpleMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="255,0,0,255"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="joinstyle" v="bevel"/>
          <prop k="name" v="circle"/>
          <prop k="size" v="3.5"/>
          <prop k="size_unit" v="MM"/>
        </layer>
      </symbol>
      <symbol name="4" force_rhr="0" type="marker" clip_to_extent="1" alpha="1">
        <layer locked="0" enabled="1" class="SimpleMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="0,0,0,255"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="joinstyle" v="bevel"/>
          <prop k="name" v="square"/>
          <prop k="size" v="3.5"/>
          <prop k="size_unit" v="MM"/>
        </layer>
      </symbol>
      <symbol name="5" force_rhr="0" type="marker" clip_to_extent="1" alpha="1">
        <layer locked="0" enabled="1" class="SimpleMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="255,170,255,255"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="joinstyle" v="bevel"/>
          <prop k="name" v="diamond"/>
          <prop k="size" v="3.5"/>
          <prop k="size_unit" v="MM"/>
        </layer>
      </symbol>
      <symbol name="6" force_rhr="0" type="marker" clip_to_extent="1" alpha="1">
        <layer locked="0" enabled="1" class="SimpleMarker" pass="0">
          <prop k="angle" v="0"/>
          <prop k="color" v="150,150,150,255"/>
          <prop k="horizontal_anchor_point" v="1"/>
          <prop k="joinstyle" v="bevel"/>
          <prop k="name" v="cross"/>
          <prop k="size" v="3.5"/>
          <prop k="size_unit" v="MM"/>
        </layer>
      </symbol>
    </symbols>
    <rotation/>
    <sizescale/>
  </renderer-v2>
</qgis>
"""
    
    # Arquivo de projeto QGIS
    qgis_project = f"""<!DOCTYPE qgis PUBLIC 'http://mrcc.com/qgis.dtd' 'SYSTEM'>
<qgis projectname="Cartografia Amaz√¥nica - GAIA DIGITAL" version="3.22.0-Bia≈Çowie≈ºa">
  <title>Cartografia Amaz√¥nica - GAIA DIGITAL</title>
  <projectCrs>
    <spatialrefsys>
      <wkt>GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563]],PRIMEM["Greenwich",0],UNIT["degree",0.0174532925199433]]</wkt>
      <proj4>+proj=longlat +datum=WGS84 +no_defs</proj4>
      <srsid>3452</srsid>
      <srid>4326</srid>
      <authid>EPSG:4326</authid>
      <description>WGS 84</description>
      <projectionacronym>longlat</projectionacronym>
      <ellipsoidacronym>WGS84</ellipsoidacronym>
      <geographicflag>true</geographicflag>
    </spatialrefsys>
  </projectCrs>
  <mapcanvas name="theMapCanvas">
    <units>degrees</units>
    <extent>
      <xmin>{min_lon}</xmin>
      <ymin>{min_lat}</ymin>
      <xmax>{max_lon}</xmax>
      <ymax>{max_lat}</ymax>
    </extent>
    <rotation>0</rotation>
    <destinationsrs>
      <spatialrefsys>
        <authid>EPSG:4326</authid>
      </spatialrefsys>
    </destinationsrs>
  </mapcanvas>
  <projectMetadata>
    <author>GAIA DIGITAL - Cartografia Amaz√¥nica</author>
    <creation>
      <datetime>{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</datetime>
    </creation>
    <abstract>Projeto cartogr√°fico gerado automaticamente para an√°lise da regi√£o amaz√¥nica</abstract>
    <keywords>
      <keyword>Amaz√¥nia</keyword>
      <keyword>cartografia</keyword>
      <keyword>geom√°tica</keyword>
      <keyword>sensoriamento remoto</keyword>
    </keywords>
  </projectMetadata>
  <layerorder>
    <layer id="OpenStreetMap_base"/>
    <layer id="OpenTopoMap_topo"/>
    <layer id="feicoes_amazonicas"/>
  </layerorder>
  
  <!-- Camadas Base -->
  <projectlayers>
    <!-- OpenStreetMap Base -->
    <maplayer type="raster" name="OpenStreetMap" id="OpenStreetMap_base">
      <layername>OpenStreetMap Base</layername>
      <datasource>type=xyz&amp;url=https://tile.openstreetmap.org/%7Bz%7D/%7Bx%7D/%7By%7D.png&amp;zmax=19&amp;zmin=0</datasource>
      <shortname>osm</shortname>
      <srs>
        <spatialrefsys>
          <authid>EPSG:3857</authid>
        </spatialrefsys>
      </srs>
      <layerorder>0</layerorder>
    </maplayer>
    
    <!-- OpenTopoMap (Topogr√°fico) -->
    <maplayer type="raster" name="OpenTopoMap" id="OpenTopoMap_topo">
      <layername>Mapa Topogr√°fico</layername>
      <datasource>type=xyz&amp;url=https://tile.opentopomap.org/%7Bz%7D/%7Bx%7D/%7By%7D.png&amp;zmax=17&amp;zmin=0</datasource>
      <shortname>topo</shortname>
      <srs>
        <spatialrefsys>
          <authid>EPSG:3857</authid>
        </spatialrefsys>
      </srs>
      <layerorder>1</layerorder>
    </maplayer>
    
    <!-- Fei√ß√µes Geogr√°ficas com Estilos Cartogr√°ficos -->
    <maplayer type="vector" name="Fei√ß√µes Amaz√¥nicas" id="feicoes_amazonicas">
      <layername>Fei√ß√µes Amaz√¥nicas</layername>
      <datasource>./feicoes_amazonicas.geojson</datasource>
      <shortname>feicoes</shortname>
      <srs>
        <spatialrefsys>
          <authid>EPSG:4326</authid>
        </spatialrefsys>
      </srs>
      <stylesources>
        <style path="./estilo_categorias.qml" name="Estilo por Categoria"/>
        <style path="./estilo_caravela.qml" name="Estilo Caravela"/>
      </stylesources>
      <layerorder>2</layerorder>
    </maplayer>
  </projectlayers>
</qgis>
"""
    
    # README.txt com instru√ß√µes cartogr√°ficas
    readme = f"""GAIA DIGITAL - Cartografia Amaz√¥nica - Projeto QGIS
====================================================

Data de cria√ß√£o: {datetime.now().strftime('%Y-%m-%d')}

ORIENTA√á√ïES CARTOGR√ÅFICAS:
------------------------
1. Datum utilizado: WGS 84 (EPSG:4326)
2. Sistema de coordenadas: Geogr√°ficas (Latitude/Longitude)
3. Proje√ß√£o recomendada para c√°lculos de √°rea: UTM (zonas 19S a 23S para a Amaz√¥nia)
4. Escala cartogr√°fica padr√£o sugerida: 1:100.000

INSTRU√á√ïES:
----------
1. Descompacte todos os arquivos em uma pasta
2. Abra o arquivo de projeto QGIS (cartografia_amazonica.qgs)
3. O projeto cont√©m tr√™s camadas principais:
   - OpenStreetMap (camada base)
   - OpenTopoMap (camada topogr√°fica)
   - Fei√ß√µes Amaz√¥nicas (pontos identificados com classifica√ß√£o cartogr√°fica)

4. Alternando entre estilos:
   - Estilo por Categoria: visualiza fei√ß√µes por tipo (hidrografia, relevo, etc.)
   - Estilo Caravela: visualiza todas as fei√ß√µes com √≠cone de caravela

ARQUIVOS INCLU√çDOS:
-----------------
- cartografia_amazonica.qgs: Projeto QGIS principal com metadados cartogr√°ficos
- feicoes_amazonicas.geojson: Camada vetorial com fei√ß√µes geogr√°ficas identificadas
- estilo_categorias.qml: Simbologia cartogr√°fica tem√°tica
- estilo_caravela.qml: Simbologia com √≠cone de caravela

FONTES DE DADOS:
--------------
- Base cartogr√°fica: OpenStreetMap (¬© OpenStreetMap contributors)
- Dados topogr√°ficos: OpenTopoMap (CC-BY-SA)
- Fei√ß√µes geogr√°ficas: Extra√≠das por an√°lise sem√¢ntica via GAIA DIGITAL

Este projeto cartogr√°fico foi gerado automaticamente pelo aplicativo GAIA DIGITAL.
"""

    # Criar ZIP em mem√≥ria
    zip_buffer = io.BytesIO()
    with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zipf:
        zipf.writestr("cartografia_amazonica.qgs", qgis_project)
        zipf.writestr("feicoes_amazonicas.geojson", geojson_str)
        zipf.writestr("estilo_caravela.qml", caravela_qml)
        zipf.writestr("estilo_categorias.qml", categorias_qml)
        zipf.writestr("README.txt", readme)
    
    # Criar link para download
    zip_buffer.seek(0)
    b64 = base64.b64encode(zip_buffer.read()).decode()
    href = f'<a href="data:application/zip;base64,{b64}" download="cartografia_amazonica.zip">‚¨áÔ∏è Download Projeto Cartogr√°fico QGIS Completo</a>'
    
    return href

# --------- INTERFACE DO APLICATIVO STREAMLIT ---------
st.title("üó∫Ô∏è GAIA DIGITAL - Cartografia Amaz√¥nica")
st.markdown("""
Este aplicativo utiliza an√°lise sem√¢ntica avan√ßada para extrair fei√ß√µes geogr√°ficas 
de descri√ß√µes textuais da Amaz√¥nia, gerando mapas tem√°ticos e arquivos compat√≠veis 
com QGIS, incluindo √≠cones de caravela para navega√ß√£o cartogr√°fica.
""")

# Barra lateral com op√ß√µes
st.sidebar.title("Configura√ß√µes Cartogr√°ficas")

# Explica√ß√£o do processamento cartogr√°fico na barra lateral
with st.sidebar.expander("Sobre o Processamento Cartogr√°fico"):
    st.markdown("""
    ### Processamento Cartogr√°fico Sem√¢ntico
    
    Este aplicativo utiliza t√©cnicas cartogr√°ficas para:
    
    1. **Extra√ß√£o de Fei√ß√µes Geogr√°ficas**: Identifica elementos f√≠sicos, biol√≥gicos e antr√≥picos
    2. **Classifica√ß√£o Segundo Normas Cartogr√°ficas**: Categoriza segundo padr√µes t√©cnicos
    3. **Georreferenciamento**: Atribui coordenadas geogr√°ficas a cada fei√ß√£o
    4. **Simbologia Tem√°tica**: Aplica representa√ß√£o cartogr√°fica adequada
    5. **Metadados Cartogr√°ficos**: Documenta fonte, escala e precis√£o
    
    Gera mapas e dados para sistemas de informa√ß√£o geogr√°fica.
    """)

# √Årea de entrada de texto
text_input = st.text_area(
    "Descreva a regi√£o amaz√¥nica de interesse:", 
    value="Quero analisar a regi√£o pr√≥xima a Manaus, especialmente as √°reas de conflu√™ncia do Rio Negro com o Rio Solim√µes, onde ocorrem fen√¥menos de encontro das √°guas. A leste fica a Reserva Florestal Adolpho Ducke, importante √°rea de preserva√ß√£o, e ao norte a rodovia AM-010 conecta Manaus a Itacoatiara. O Arquip√©lago de Anavilhanas, com seu labirinto de ilhas fluviais, fica a noroeste da capital amazonense.",
    height=150
)

# Configura√ß√µes cartogr√°ficas avan√ßadas
with st.sidebar.expander("Configura√ß√µes Cartogr√°ficas Avan√ßadas"):
    map_zoom = st.slider("Escala do Mapa (Zoom)", 8, 15, 10)
    importance_threshold = st.slider("Limiar de Import√¢ncia Cartogr√°fica", 0.0, 1.0, 0.5, 
                                  help="Fei√ß√µes com relev√¢ncia cartogr√°fica abaixo deste valor ser√£o ignoradas")
    view_option = st.radio(
        "Visualiza√ß√£o de Mapa",
        ["Base", "Topogr√°fico", "H√≠brido", "Todos"]
    )
    
# Bot√£o para processar
if st.button("Processar e Gerar Mapa Cartogr√°fico"):
    # Extrair fei√ß√µes geogr√°ficas do texto usando an√°lise sem√¢ntica
    with st.spinner("Realizando an√°lise sem√¢ntica cartogr√°fica..."):
        features = extract_geographic_features(text_input)
        
        # Filtrar por import√¢ncia cartogr√°fica
        if features:
            features = [f for f in features if f.get('importancia_cartografica', 0) >= importance_threshold]
            
        if not features:
            # Fei√ß√µes padr√£o da Amaz√¥nia Central
            features = [
                {
                    "nome": "Manaus", 
                    "tipo": "Capital estadual", 
                    "categoria": "localidade",
                    "geometria": "ponto",
                    "lat": -3.1, 
                    "lon": -60.0, 
                    "importancia_cartografica": 0.95,
                    "metadados": {
                        "fonte": "IBGE",
                        "escala_recomendada": "1:50000",
                        "data_referencia": "2023-01-01"
                    }
                },
                {
                    "nome": "Encontro das √Åguas", 
                    "tipo": "Fen√¥meno hidrogr√°fico", 
                    "categoria": "hidrografia",
                    "geometria": "ponto",
                    "lat": -3.08, 
                    "lon": -59.95, 
                    "importancia_cartografica": 0.9,
                    "metadados": {
                        "fonte": "ANA",
                        "escala_recomendada": "1:25000",
                        "data_referencia": "2023-01-01"
                    }
                },
                {
                    "nome": "Reserva Adolpho Ducke", 
                    "tipo": "Unidade de conserva√ß√£o", 
                    "categoria": "limite",
                    "geometria": "pol√≠gono",
                    "lat": -2.93, 
                    "lon": -59.97, 
                    "importancia_cartografica": 0.85,
                    "metadados": {
                        "fonte": "ICMBio",
                        "escala_recomendada": "1:100000",
                        "data_referencia": "2023-01-01"
                    }
                }
            ]
            st.info("Usando fei√ß√µes cartogr√°ficas padr√£o para a regi√£o de Manaus")
    
    # Exibir fei√ß√µes identificadas em tabela
    st.subheader("Fei√ß√µes Geogr√°ficas Identificadas pela An√°lise Cartogr√°fica")
    
    # Criar DataFrame para exibi√ß√£o
    features_df = pd.DataFrame(features)
    
    # Ajustar colunas para exibi√ß√£o cartogr√°fica
    if not features_df.empty:
        # Selecionar e ordenar colunas para apresenta√ß√£o cartogr√°fica
        display_cols = ['nome', 'tipo', 'categoria', 'geometria', 'lat', 'lon', 'importancia_cartografica']
        available_cols = [col for col in display_cols if col in features_df.columns]
        features_df = features_df[available_cols]
        
        # Renomear colunas para padr√µes cartogr√°ficos
        rename_map = {
            'nome': 'Nome da Fei√ß√£o',
            'tipo': 'Tipo de Fei√ß√£o',
            'categoria': 'Categoria Cartogr√°fica',
            'geometria': 'Representa√ß√£o Geom√©trica',
            'lat': 'Latitude',
            'lon': 'Longitude',
            'importancia_cartografica': 'Import√¢ncia (0-1)'
        }
        features_df = features_df.rename(columns={k: v for k, v in rename_map.items() if k in features_df.columns})
        
        # Formatar colunas num√©ricas
        if 'Latitude' in features_df.columns:
            features_df['Latitude'] = features_df['Latitude'].map(lambda x: f"{x:.6f}")
        if 'Longitude' in features_df.columns:
            features_df['Longitude'] = features_df['Longitude'].map(lambda x: f"{x:.6f}")
        if 'Import√¢ncia (0-1)' in features_df.columns:
            features_df['Import√¢ncia (0-1)'] = features_df['Import√¢ncia (0-1)'].map(lambda x: f"{x:.2f}")
    
    # Exibir em formato tabular
    st.dataframe(features_df)
    
    # Determinar centro do mapa e obter camadas
    center_lat = sum(f.get("lat", 0) for f in features) / len(features)
    center_lon = sum(f.get("lon", 0) for f in features) / len(features)
    
    # Obter HTML para diferentes tipos de mapas
    map_layers = get_map_layers_html(center_lat, center_lon, map_zoom, features)
    
    # Exibir mapas conforme sele√ß√£o do usu√°rio
    if view_option == "Todos":
        st.subheader("Mapa Base (OpenStreetMap)")
        st.markdown(map_layers["base"], unsafe_allow_html=True)
        
        st.subheader("Mapa Topogr√°fico")
        st.markdown(map_layers["topografico"], unsafe_allow_html=True)
        
        st.subheader("Mapa H√≠brido")
        st.markdown(map_layers["hibrido"], unsafe_allow_html=True)
    else:
        map_type = view_option.lower()
        map_titles = {
            "base": "Mapa Base (OpenStreetMap)",
            "topogr√°fico": "Mapa Topogr√°fico",
            "h√≠brido": "Mapa H√≠brido"
        }
        
        # Corrigir mapeamento para o tipo selecionado
        map_key = "topografico" if map_type == "topogr√°fico" else map_type.lower()
        
        st.subheader(map_titles.get(map_type, f"Mapa {view_option}"))
        st.markdown(map_layers[map_key], unsafe_allow_html=True)
    
    # Exibir legenda cartogr√°fica
    st.subheader("Legenda Cartogr√°fica")
    
    # Criar legenda com contagens por categoria
    category_counts = {}
    for feature in features:
        cat = feature.get('categoria', '').capitalize()
        if cat:
            category_counts[cat] = category_counts.get(cat, 0) + 1
    
    # Exibir categorias em formato de legenda
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### Categorias")
        for cat, count in sorted(category_counts.items()):
            st.markdown(f"- **{cat}**: {count} fei√ß√£o(√µes)")
    
    with col2:
        st.markdown("### Escala Cartogr√°fica")
        st.markdown(f"- **Escala aproximada do mapa**: 1:{int(40000/map_zoom)}")
        st.markdown(f"- **Proje√ß√£o**: WGS 84 (EPSG:4326)")
        st.markdown(f"- **Visualiza√ß√£o**: Coordenadas geogr√°ficas")
    
    # Se√ß√£o de downloads
    st.subheader("Exportar para QGIS")
    
    # Criar GeoJSON para QGIS
    geojson_link, geojson_str = create_geojson_for_qgis(features)
    
    # Criar estilos QML
    qml_styles = create_qml_styles_for_qgis()
    
    # Exibir links para download
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### Dados Cartogr√°ficos")
        st.markdown(geojson_link, unsafe_allow_html=True)
    
    with col2:
        st.markdown("### Estilos Cartogr√°ficos")
        st.markdown(qml_styles["caravela"], unsafe_allow_html=True)
        st.markdown(qml_styles["categorias"], unsafe_allow_html=True)
    
    # Projeto QGIS completo
    st.markdown("### Projeto Cartogr√°fico QGIS")
    st.markdown(create_qgis_project_package(features, geojson_str), unsafe_allow_html=True)
    
    # Instru√ß√µes cartogr√°ficas para QGIS
    with st.expander("Orienta√ß√µes Cartogr√°ficas para QGIS"):
        st.markdown("""
        ### Instru√ß√µes Cartogr√°ficas para QGIS
        
        #### Procedimento Recomendado
        1. Baixe o "Projeto Cartogr√°fico QGIS Completo" (ZIP)
        2. Descompacte todos os arquivos em uma pasta
        3. Abra o arquivo .qgs no QGIS
        4. O projeto j√° est√° configurado com:
           - Sistema de refer√™ncia WGS 84 (EPSG:4326)
           - Camadas base (OpenStreetMap e OpenTopoMap)
           - Fei√ß√µes amaz√¥nicas classificadas por categoria
           - Simbologia tem√°tica aplicada segundo normas cartogr√°ficas
        
        #### Personaliza√ß√£o da Representa√ß√£o Cartogr√°fica
        
        **Para alterar a simbologia:**
        - Clique com bot√£o direito na camada "Fei√ß√µes Amaz√¥nicas" > Propriedades
        - Na aba "Simbologia", escolha entre:
          - "Estilo Categorizado" (classifica√ß√£o por tipo de fei√ß√£o)
          - "Estilo Caravela" (√≠cone √∫nico para todas as fei√ß√µes)
        
        **Para an√°lise espacial avan√ßada:**
        - Use as ferramentas de geoprocessamento do QGIS:
          - An√°lise de proximidade (buffer)
          - Densidade de Kernel
          - Interpola√ß√£o para modelos de superf√≠cie
        
        **Para composi√ß√£o de mapas:**
        - Use o compositor de impress√£o do QGIS
        - Inclua elementos cartogr√°ficos essenciais:
          - T√≠tulo
          - Legenda
          - Escala gr√°fica e num√©rica
          - Grade de coordenadas
          - Rosa dos ventos
          - Fonte dos dados e metadados
        """)
        
    # An√°lise geogr√°fica avan√ßada
    with st.expander("An√°lise Geogr√°fica"):
        if st.button("Gerar An√°lise Geogr√°fica"):
            prompt = f"""
            Realize uma an√°lise geogr√°fica da seguinte regi√£o amaz√¥nica, considerando as fei√ß√µes cartogr√°ficas identificadas:
            
            Descri√ß√£o da √°rea: {text_input}
            
            Fei√ß√µes geogr√°ficas identificadas:
            {json.dumps([{"nome": f['nome'], "tipo": f['tipo'], "categoria": f['categoria'], "lat": f['lat'], "lon": f['lon']} for f in features], indent=2)}
            
            Forne√ßa uma an√°lise detalhada considerando:
            1. Caracter√≠sticas geomorfol√≥gicas e hidrogr√°ficas da regi√£o
            2. Padr√µes de ocupa√ß√£o territorial e uso do solo
            3. Din√¢mica ambiental e unidades de conserva√ß√£o
            4. Potenciais conflitos socioambientais
            5. Recomenda√ß√µes para gest√£o territorial
            
            Utilize terminologia geogr√°fica e cartogr√°fica adequada. Estruture a an√°lise em t√≥picos claros.
            """
            
            analysis = query_gemini_api(prompt, temperature=0.1)
            if analysis:
                st.markdown(analysis)
            else:
                st.error("N√£o foi poss√≠vel gerar a an√°lise geogr√°fica. Tente novamente mais tarde.")

# Rodap√©
st.sidebar.markdown("---")
st.sidebar.info(
    "GAIA DIGITAL - Cartografia Amaz√¥nica\n\n"
    "Especialista GeoPython-QGIS ¬© 2025"
)
